-- Fonction pour décoder une chaîne Base64
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' 

local function base64Decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do
            r = r .. (f % 2^i - f % 2^(i-1) > 0 and '1' or '0')
        end
        return r
    end):gsub('%d%d%d%d%d%d%d%d', function(x)
        local c=0
        for i=1,8 do
            c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0)
        end
        return string.char(c)
    end))
end

-- Base64 du script Lua à exécuter
local encodedScript = "LS0gQXNzdXJlei12b3VzIHF1ZSBsZSBqZXUgZXN0IGNoYXJn6QppZiBub3QgZ2FtZTpJc0xvYWRlZCgpIHRoZW4KICAgIGdhbWUuTG9hZGVkOldhaXQoKQplbmQKCmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBMb2NhbFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgdGFyZ2V0UGxheWVyTmFtZXMgPSB7fQpsb2NhbCBUb29sTmFtZSA9ICJLYXdhaWkgUmV2b2x2ZXIiCmxvY2FsIGlnbm9yZWRVc2VybmFtZXMgPSB7Ik9saXZlcl8xNzUzNCIsICJzb2x0ZXJyZW1hbjIiLCAiQUFOR0VMOTk5UyIsICJzb2x0ZXJybWFuIn0KCi0tIENy6WF0aW9uIGRlIGwnaW50ZXJmYWNlIHV0aWxpc2F0ZXVyCmxvY2FsIFNjcmVlbkd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIiwgZ2FtZS5Db3JlR3VpKQpsb2NhbCBUZXh0Qm94ID0gSW5zdGFuY2UubmV3KCJUZXh0Qm94IiwgU2NyZWVuR3VpKQpsb2NhbCBBZGRCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBTY3JlZW5HdWkpCmxvY2FsIFJlbW92ZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIFNjcmVlbkd1aSkKbG9jYWwgU3VnZ2VzdGlvbnNGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBTY3JlZW5HdWkpCgotLSBDb25maWd1cmF0aW9uIFVJClRleHRCb3guU2l6ZSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDMwKQpUZXh0Qm94LlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0yMjAsIDAsIDEwKQpUZXh0Qm94LlBsYWNlaG9sZGVyVGV4dCA9ICJFbnRyZXIgbGUgbm9tIGR1IGpvdWV1ciIKCkFkZEJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgMzApCkFkZEJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMTIwLCAwLCA1MCkKQWRkQnV0dG9uLlRleHQgPSAiRml4ZSIKClJlbW92ZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgMzApClJlbW92ZUJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMjMwLCAwLCA1MCkKUmVtb3ZlQnV0dG9uLlRleHQgPSAiVW5maXhlIgoKU3VnZ2VzdGlvbnNGcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDIwMCwgMCwgMTAwKQpTdWdnZXN0aW9uc0ZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0yMjAsIDAsIDkwKQpTdWdnZXN0aW9uc0ZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KDAuMSwgMC4xLCAwLjEpClN1Z2dlc3Rpb25zRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNQpTdWdnZXN0aW9uc0ZyYW1lLlZpc2libGUgPSBmYWxzZQoKLS0gRm9uY3Rpb25zIHV0aWxpdGFpcmVzCmxvY2FsIGZ1bmN0aW9uIEdldFBsYXllckJ5TmFtZShuYW1lKQogICAgZm9yIF8sIHAgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgaWYgcC5EaXNwbGF5TmFtZSA9PSBuYW1lIHRoZW4gcmV0dXJuIHAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBpc0lnbm9yZWQocGxheWVyKQogICAgZm9yIF8sIG5hbWUgaW4gaXBhaXJzKGlnbm9yZWRVc2VybmFtZXMpIGRvCiAgICAgICAgaWYgcGxheWVyLk5hbWUgPT0gbmFtZSB0aGVuIHJldHVybiB0cnVlIGVuZAogICAgZW5kCiAgICByZXR1cm4gZmFsc2UKZW5kCgpsb2NhbCBmdW5jdGlvbiBhcHBseURhbWFnZSh0YXJnZXRQbGF5ZXIpCiAgICBsb2NhbCBodW1hbm9pZCA9IHRhcmdldFBsYXllci5DaGFyYWN0ZXIgYW5kIHRhcmdldFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikKICAgIGlmIG5vdCBodW1hbm9pZCB0aGVuIHJldHVybiBlbmQKCiAgICBsb2NhbCB0b29sID0gTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoVG9vbE5hbWUpCiAgICBpZiB0b29sIHRoZW4KICAgICAgICB0b29sLlBhcmVudCA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIC0tIFJlbmRyZSBpbnZpc2libGUKICAgICAgICBmb3IgXywgZGVzYyBpbiBwYWlycyh0b29sOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgIGlmIGRlc2M6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgIGRlc2MuVHJhbnNwYXJlbmN5ID0gMQogICAgICAgICAgICAgICAgZGVzYy5DYW5Db2xsaWRlID0gZmFsc2UKICAgICAgICAgICAgZWxzZWlmIGRlc2M6SXNBKCJEZWNhbCIpIHRoZW4KICAgICAgICAgICAgICAgIGRlc2MuVHJhbnNwYXJlbmN5ID0gMQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICAgICAgdG9vbCA9IExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZChUb29sTmFtZSkKICAgICAgICBsb2NhbCBkYW1hZ2VSZW1vdGUgPSB0b29sIGFuZCB0b29sOkZpbmRGaXJzdENoaWxkKCJEYW1hZ2VSZW1vdGUiKQogICAgICAgIGlmIGRhbWFnZVJlbW90ZSB0aGVuCiAgICAgICAgICAgIGRhbWFnZVJlbW90ZTpGaXJlU2VydmVyKGh1bWFub2lkKQogICAgICAgIGVuZAogICAgICAgIHRvb2wuUGFyZW50ID0gTG9jYWxQbGF5ZXIuQmFja3BhY2sKICAgIGVuZAplbmQKCi0tIEJvdWNsZSBkJ2F0dGFxdWUKbG9jYWwgZnVuY3Rpb24gYXR0YWNrTG9vcCgpCiAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgZm9yIF8sIG5hbWUgaW4gaXBhaXJzKHRhcmdldFBsYXllck5hbWVzKSBkbwogICAgICAgICAgICBsb2NhbCBwbGF5ZXIgPSBHZXRQbGF5ZXJCeU5hbWUobmFtZSkKICAgICAgICAgICAgaWYgcGxheWVyIGFuZCBub3QgaXNJZ25vcmVkKHBsYXllcikgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBwbGF5ZXIuQ2hhcmFjdGVyIGFuZCBwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpCiAgICAgICAgICAgICAgICB3aGlsZSBodW1hbm9pZCBhbmQgaHVtYW5vaWQuSGVhbHRoID4gMCBhbmQgdGFibGUuZmluZCh0YXJnZXRQbGF5ZXJOYW1lcywgcGxheWVyLkRpc3BsYXlOYW1lKSBkbwogICAgICAgICAgICAgICAgICAgIGFwcGx5RGFtYWdlKHBsYXllcikKICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICAgICAgICAgICAgICBpZiBub3QgcGxheWVyLkNoYXJhY3RlciBvciBub3QgcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHRhc2sud2FpdCgwLjIpCiAgICBlbmQKZW5kCgotLSBVSSBCdXR0b25zCkFkZEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGxvY2FsIG5hbWUgPSBUZXh0Qm94LlRleHQKICAgIGlmIG5hbWUgfj0gIiIgYW5kIG5vdCB0YWJsZS5maW5kKHRhcmdldFBsYXllck5hbWVzLCBuYW1lKSB0aGVuCiAgICAgICAgbG9jYWwgcGxheWVyID0gR2V0UGxheWVyQnlOYW1lKG5hbWUpCiAgICAgICAgaWYgcGxheWVyIGFuZCBub3QgaXNJZ25vcmVkKHBsYXllcikgdGhlbgogICAgICAgICAgICB0YWJsZS5pbnNlcnQodGFyZ2V0UGxheWVyTmFtZXMsIG5hbWUpCiAgICAgICAgZW5kCiAgICAgICAgVGV4dEJveC5UZXh0ID0gIiIKICAgIGVuZAplbmQpCgpSZW1vdmVCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBsb2NhbCBuYW1lID0gVGV4dEJveC5UZXh0CiAgICBmb3IgaSwgbiBpbiBpcGFpcnModGFyZ2V0UGxheWVyTmFtZXMpIGRvCiAgICAgICAgaWYgbiA9PSBuYW1lIHRoZW4KICAgICAgICAgICAgdGFibGUucmVtb3ZlKHRhcmdldFBsYXllck5hbWVzLCBpKQogICAgICAgICAgICBicmVhawogICAgICAgIGVuZAogICAgZW5kCiAgICBUZXh0Qm94LlRleHQgPSAiIgplbmQpCgotLSBTdWdnZXN0aW9ucyBVSQpsb2NhbCBmdW5jdGlvbiB1cGRhdGVTdWdnZXN0aW9ucyh0ZXh0KQogICAgZm9yIF8sIGNoaWxkIGluIHBhaXJzKFN1Z2dlc3Rpb25zRnJhbWU6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICBpZiBjaGlsZDpJc0EoIlRleHRCdXR0b24iKSB0aGVuIGNoaWxkOkRlc3Ryb3koKSBlbmQKICAgIGVuZAoKICAgIFN1Z2dlc3Rpb25zRnJhbWUuVmlzaWJsZSA9IHRleHQgfj0gIiIKICAgIGxvY2FsIHkgPSAwCiAgICBmb3IgXywgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICBpZiB0ZXh0IH49ICIiIGFuZCBwbGF5ZXIuRGlzcGxheU5hbWU6bG93ZXIoKTpmaW5kKHRleHQ6bG93ZXIoKSkgdGhlbgogICAgICAgICAgICBsb2NhbCBidG4gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBTdWdnZXN0aW9uc0ZyYW1lKQogICAgICAgICAgICBidG4uU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyMCkKICAgICAgICAgICAgYnRuLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIHkpCiAgICAgICAgICAgIGJ0bi5UZXh0ID0gcGxheWVyLkRpc3BsYXlOYW1lCiAgICAgICAgICAgIGJ0bi5UZXh0U2NhbGVkID0gdHJ1ZQogICAgICAgICAgICBidG4uVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMSwgMSkKICAgICAgICAgICAgYnRuLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KDAuMywgMC4zLCAwLjMpCiAgICAgICAgICAgIGJ0bi5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICAgICAgICAgIGJ0bi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIFRleHRCb3guVGV4dCA9IHBsYXllci5EaXNwbGF5TmFtZQogICAgICAgICAgICAgICAgdXBkYXRlU3VnZ2VzdGlvbnMoIiIpCiAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgeSA9IHkgKyAyNQogICAgICAgIGVuZAogICAgZW5kCmVuZAoKVGV4dEJveDpHZXRQcm9wZXJ0eUNoYW5nZWRTaWduYWwoIlRleHQiKTpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIHVwZGF0ZVN1Z2dlc3Rpb25zKFRleHRCb3guVGV4dCkKZW5kKQoKLS0gS2ljayBsaXN0ZW5lcgpsb2NhbCBmdW5jdGlvbiBsaXN0ZW5LaWNrKCkKICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgaWYgcGxheWVyLk5hbWUgPT0gInNvbHRlcnJtYW4iIHRoZW4KICAgICAgICAgICAgcGxheWVyLkNoYXR0ZWQ6Q29ubmVjdChmdW5jdGlvbihtc2cpCiAgICAgICAgICAgICAgICBpZiBtc2cgPT0gIiFraWNrIiBhbmQgTG9jYWxQbGF5ZXIuTmFtZSB+PSAic29sdGVycm1hbiIgdGhlbgogICAgICAgICAgICAgICAgICAgIExvY2FsUGxheWVyOktpY2soIktpY2sgcGFyIHNvbHRlcnJtYW4uIikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBQbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24ocGxheWVyKQogICAgICAgIGlmIHBsYXllci5OYW1lID09ICJzb2x0ZXJybWFuIiB0aGVuCiAgICAgICAgICAgIHBsYXllci5DaGF0dGVkOkNvbm5lY3QoZnVuY3Rpb24obXNnKQogICAgICAgICAgICAgICAgaWYgbXNnID09ICIha2ljayIgYW5kIExvY2FsUGxheWVyLk5hbWUgfj0gInNvbHRlcnJtYW4iIHRoZW4KICAgICAgICAgICAgICAgICAgICBMb2NhbFBsYXllcjpLaWNrKCJLaWNrIHBhciBzb2x0ZXJybWFuLiIpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZAogICAgZW5kKQplbmQKCi0tIFNjcmlwdDI6IEFudGktcmFnZG9sbCAvIHTpbOlwb3J0YXRpb24KbG9jYWwgZnVuY3Rpb24gYW50aVJhZ2RvbGwocGxheWVyKQogICAgbG9jYWwgZnVuY3Rpb24gc2V0dXBDaGFyKGNoYXIpCiAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBjaGFyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKQogICAgICAgIGxvY2FsIGZ1bmN0aW9uIHRwVm9pZCgpCiAgICAgICAgICAgIGZvciBfLCBwYXJ0IGluIHBhaXJzKGNoYXI6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIHBhcnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBwYXJ0LkNhbkNvbGxpZGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGJwID0gSW5zdGFuY2UubmV3KCJCb2R5UG9zaXRpb24iKQogICAgICAgICAgICAgICAgICAgIGJwLk5hbWUgPSAiVFBGb3JjZSIKICAgICAgICAgICAgICAgICAgICBicC5NYXhGb3JjZSA9IFZlY3RvcjMubmV3KDFlNywxZTcsMWU3KQogICAgICAgICAgICAgICAgICAgIGJwLlBvc2l0aW9uID0gVmVjdG9yMy5uZXcoMCwtMTAwMCwwKQogICAgICAgICAgICAgICAgICAgIGJwLkQgPSA1MDAwCiAgICAgICAgICAgICAgICAgICAgYnAuUCA9IDFlNgogICAgICAgICAgICAgICAgICAgIGJwLlBhcmVudCA9IHBhcnQKICAgICAgICAgICAgICAgICAgICB0YXNrLmRlbGF5KDAuMTUsIGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgcGFydC5DYW5Db2xsaWRlID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBicCB0aGVuIGJwOkRlc3Ryb3koKSBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGlmIGh1bWFub2lkOkdldFN0YXRlKCkgPT0gRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5QaHlzaWNzIHRoZW4KICAgICAgICAgICAgdHBWb2lkKCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGh1bWFub2lkLlN0YXRlQ2hhbmdlZDpDb25uZWN0KGZ1bmN0aW9uKF8sIHN0YXRlKQogICAgICAgICAgICAgICAgaWYgc3RhdGUgPT0gRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5QaHlzaWNzIHRoZW4KICAgICAgICAgICAgICAgICAgICB0cFZvaWQoKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIHBsYXllci5DaGFyYWN0ZXIgdGhlbiBzZXR1cENoYXIocGxheWVyLkNoYXJhY3RlcikgZW5kCiAgICBwbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChzZXR1cENoYXIpCmVuZAoKLS0gTGFuY2VyIHRvdXQKdGFzay5zcGF3bihhdHRhY2tMb29wKQpsaXN0ZW5LaWNrKCkKYW50aVJhZ2RvbGwoTG9jYWxQbGF5ZXIp"

-- Décoder et exécuter
local decodedScript = base64Decode(encodedScript)
local func, err = loadstring(decodedScript)
if func then
    func()
else
    warn("Erreur lors du chargement du script :", err)
end
